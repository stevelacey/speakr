<?php

/**
 * sfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    speakr
 * @subpackage model
 * @author     Steve Lacey
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser {
  public function getTwitterUsername() {
    return '@'.$this->getUsername();
  }

  public function getUrl() {
    return sfConfig::get('app_twitter_url').'/'.$this->getUsername();
  }

  public function attend(Event $event, $bool = true) {
    if($bool) {
      $event->Attending[] = $this;
      $event->save();
    } else {
      Doctrine::getTable('Attendee')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
    }
  }

  public function speak(Event $event, $bool = true) {
    if($bool) {
      $event->Speakers[] = $this;
      $event->save();
    } else {
      Doctrine::getTable('Speaker')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
    }
  }

  public function watch(Event $event, $bool = true) {
    if(!$this->isWatching($event) && $bool) {
      $event->Watchers[] = $this;
      $event->save();
    } else if($this->isWatching($event) && !$bool) {
      Doctrine::getTable('Watcher')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
    }
  }

  public function isAttending(Event $event) {
    return $this->isRelatedToEventAs($event, 'Attendee');
  }

  public function isFavouriting(Event $event) {
    return $this->isRelatedToEventAs($event, 'Favouriter');
  }

  public function isOrganising(Event $event) {
    return $this->isRelatedToEventAs($event, 'Organiser');
  }

  public function isSpeaking(Event $event) {
    return $this->isRelatedToEventAs($event, 'Speaker');
  }

  public function isWatching(Event $event) {
    return $this->isRelatedToEventAs($event, 'Watcher');
  }

  public function isRelatedToEventAs(Event $event, $status) {
    return Doctrine::getTable($status)->findOneByEventIdAndUserId($event->getId(), $this->getId()) instanceOf $status;
  }

  public function __call($method, $arguments) {
    try {
      return parent::__call($method, $arguments);
    } catch (Doctrine_Record_UnknownPropertyException $e) {
      return call_user_func_array(array($this->getProfile(), $method), $arguments);
    }
  }
}