<?php

/**
 * sfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    speakr
 * @subpackage model
 * @author     Steve Lacey
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser {
  private $event_relations = array(
    'Attendee',
    'Favouriter',
    'Organiser',
    'Speaker',
    'Watcher'
  );
  
  private $future_event_relations = array(
    'Attending' => 'Attendee',
    'Organising' => 'Organiser',
    'Speaking' => 'Speaker',
    'Watching' => 'Watcher'
  );

  private $past_event_relations = array(
    'Attended' => 'Attendee',
    'Organised' => 'Organiser',
    'Spoken' => 'Speaker'
  );

  private $user_relations = array(
    'Follower' => 'Friend',
    'Following' => 'Friend'
  );

  public function __toString() {
    return $this->getName().' (@'.$this->getUsername().')';
  }

  public function getEvents() {
    return Doctrine::getTable('Event')->findByUser($this);
  }
  
  public function getFriendsEvents() {
    return Doctrine::getTable('Event')->findByUserFollowing($this);
  }

  public function getFriendsAttendingOrSpeaking(Event $event) {
    return Doctrine_Query::create()->
      from('sfGuardUser u')->
      leftJoin('u.Profile p')->
      leftJoin('u.Friend f on f.following_id = u.id')->
      leftJoin('u.Attendee a on a.user_id = f.following_id')->
      leftJoin('u.Speaker s on s.user_id = f.following_id')->
      where('f.follower_id = ?', $this->getId())->
      andWhere('a.event_id = ? or s.event_id = ?', array($event->getId(), $event->getId()))->
      execute();
  }

  public function getFriendsAttending(Event $event) {
    return Doctrine_Query::create()->
      from('sfGuardUser u')->
      leftJoin('u.Profile p')->
      leftJoin('u.Friend f on f.following_id = u.id')->
      leftJoin('u.Attendee a on a.user_id = f.following_id')->
      where('f.follower_id = ?', $this->getId())->
      andWhere('a.event_id = ?', $event->getId())->
      execute();
  }

  public function getFriendsSpeaking(Event $event) {
    return Doctrine_Query::create()->
      from('sfGuardUser u')->
      leftJoin('u.Profile p')->
      leftJoin('u.Friend f on f.following_id = u.id')->
      leftJoin('u.Speaker s on s.user_id = f.following_id')->
      where('f.follower_id = ?', $this->getId())->
      andWhere('s.event_id = ?', $event->getId())->
      execute();
  }

  public function attend(Event $event, $bool = true) {
    if($bool) {
      $event->Attending[] = $this;
      $event->save();
    } else {
      Doctrine::getTable('Attendee')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
    }
  }

  public function favourite(Event $event, $bool = true) {
    if($event->isOngoing() || $event->isOver()) {
      if($bool) {
        $event->Favouriters[] = $this;
        $event->save();
      } else {
        Doctrine::getTable('Favouriter')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
      }
    }
  }

  public function organise(Event $event, $bool = true) {
    if($bool) {
      $event->Organisers[] = $this;
      $event->save();
    } else {
      Doctrine::getTable('Organiser')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
    }
  }

  public function speak(Event $event, $bool = true) {
    if($bool) {
      $event->Speakers[] = $this;
      $event->save();
    } else {
      Doctrine::getTable('Speaker')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
    }
  }

  public function watch(Event $event, $bool = true) {
    if(!$this->isWatching($event) && $bool) {
      $event->Watchers[] = $this;
      $event->save();
    } else if($this->isWatching($event) && !$bool) {
      Doctrine::getTable('Watcher')->findOneByEventIdAndUserId($event->getId(), $this->getId())->delete();
    }
  }

  public function getTwitterUsername() {
    return '@'.$this->getUsername();
  }

  public function getUrl() {
    return sfConfig::get('app_twitter_url').'/'.$this->getUsername();
  }

  public function getSpeakers() {
    return Doctrine_Query::create()->
      from('sfGuardUser u')->
      leftJoin('u.Speaker s')->
      leftJoin('s.Event e')->
      leftJoin('e.Speaker sf')->
      where('sf.user_id = ?', $this->getId())->
      andWhere('u.id != ?', $this->getId())->
      execute();
  }

  public function isAttending(Event $event) {
    return $this->isRelatedToEventAs($event, 'Attendee');
  }

  public function isFavouriting(Event $event) {
    return $this->isRelatedToEventAs($event, 'Favouriter');
  }

  public function isOrganising(Event $event) {
    return $this->isRelatedToEventAs($event, 'Organiser');
  }

  public function isSpeaking(Event $event) {
    return $this->isRelatedToEventAs($event, 'Speaker');
  }

  public function isWatching(Event $event) {
    return $this->isRelatedToEventAs($event, 'Watcher');
  }

  public function isRelatedToEventAs(Event $event, $status) {
    return Doctrine::getTable($status)->findOneByEventIdAndUserId($event->getId(), $this->getId()) instanceOf $status;
  }

  public function __call($method, $arguments) {
    if(in_array($verb = substr($method, 0, 3), array('set', 'get'))) {
      $name = substr($method, 3);
      
      if($verb == 'get') {
        if(in_array($name, array_keys($this->future_event_relations))) {
          return Doctrine::getTable('Event')->findFutureEventsByUserRelation($this, $this->future_event_relations[$name]);
        }

        if(in_array($name, array_keys($this->past_event_relations))) {
          return Doctrine::getTable('Event')->findPastEventsByUserRelation($this, $this->past_event_relations[$name]);
        }
      }
    }

    try {
      return parent::__call($method, $arguments);
    } catch (Doctrine_Record_UnknownPropertyException $e) {
      return call_user_func_array(array($this->getProfile(), $method), $arguments);
    }
  }
}